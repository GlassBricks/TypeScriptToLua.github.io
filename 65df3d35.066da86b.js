(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{173:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return g}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),c=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||b[m]||a;return n?i.a.createElement(g,o(o({ref:t},p),{},{components:n})):i.a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return p}));var r=n(2),i=(n(0),n(173));const a={title:"Overview"},l={unversionedId:"api/overview",id:"api/overview",isDocsHomePage:!1,title:"Overview",description:"High-level API",source:"@site/docs/api/overview.md",slug:"/api/overview",permalink:"/docs/api/overview",editUrl:"https://github.com/TypeScriptToLua/TypeScriptToLua.github.io/edit/source/docs/api/overview.md",version:"current",sidebar:"docs",previous:{title:"Language extensions",permalink:"/docs/advanced/language-extensions"},next:{title:"Plugins",permalink:"/docs/api/plugins"}},o=[{value:"High-level API",id:"high-level-api",children:[{value:"TranspileString",id:"transpilestring",children:[]},{value:"TranspileFiles",id:"transpilefiles",children:[]},{value:"TranspileProject",id:"transpileproject",children:[]},{value:"TranspileVirtualProject",id:"transpilevirtualproject",children:[]}]},{value:"Low-level API",id:"low-level-api",children:[{value:"Transpile",id:"transpile",children:[]}]}],s={rightToc:o};function p({components:e,...t}){return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"high-level-api"},"High-level API"),Object(i.b)("p",null,"The high level API allows you to simply invoke several common transpiler operations using well-known language primitives, handling usage of TypeScript API for you."),Object(i.b)("h3",{id:"transpilestring"},"TranspileString"),Object(i.b)("p",null,"Transpile a string containing TypeScript source code to Lua."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Source: string - The TypeScript source code to transpile."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"[Optional]")," Options: tstl.CompilerOptions - CompilerOptions to use.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import * as tstl from "typescript-to-lua";\n\nconst result = tstl.transpileString(`const foo = "bar";`, { luaTarget: tstl.LuaTarget.Lua53 });\nconsole.log(result.diagnostics);\nconsole.log(result.file);\n')),Object(i.b)("h3",{id:"transpilefiles"},"TranspileFiles"),Object(i.b)("p",null,"Transpile a collection of TypeScript files to Lua."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"FileNames: string[] - An array of file paths to the TypeScript files to be transpiled."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"[Optional]")," Options: tstl.CompilerOptions - CompilerOptions to use.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import * as tstl from "typescript-to-lua";\n\nconst result = tstl.transpileFiles(["file1.ts", "file2.ts"], { luaTarget: tstl.LuaTarget.Lua53 });\nconsole.log(result.diagnostics);\nconsole.log(result.emitResult);\n')),Object(i.b)("h3",{id:"transpileproject"},"TranspileProject"),Object(i.b)("p",null,"Transpile a TypeScript project to Lua."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"tsConfigPath: string - The file path to a TypeScript project's ",Object(i.b)("inlineCode",{parentName:"li"},"tsconfig.json")," file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"[Optional]")," extendedOptions: tstl.CompilerOptions - The tsConfig already contains options, this extends those options.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import * as tstl from "typescript-to-lua";\n\nconst result = tstl.transpileProject("tsconfig.json", { luaTarget: tstl.LuaTarget.Lua53 });\nconsole.log(result.diagnostics);\nconsole.log(result.emitResult);\n')),Object(i.b)("h3",{id:"transpilevirtualproject"},"TranspileVirtualProject"),Object(i.b)("p",null,"Transpile a virtual project to Lua. A virtual project is a record (like an object literal for example) where keys are file names, and values are the contents of these files. This can be used to transpile a collection of files without having these files physically on disk."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Files: Record<string, string> - A record of fileName keys and fileContent values."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"[Optional]")," Options: tstl.CompilerOptions - CompilerOptions to use.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import * as tstl from "typescript-to-lua";\n\nconst result = tstl.transpileVirtualProject(\n  {\n    "file1.ts": `const foo = "bar";`,\n    "file2.ts": `const bar = "baz";`,\n  },\n  { luaTarget: tstl.LuaTarget.Lua53 },\n);\nconsole.log(result.diagnostics);\nconsole.log(result.transpiledFiles);\n')),Object(i.b)("h2",{id:"low-level-api"},"Low-level API"),Object(i.b)("p",null,"On the contrast with high-level API, low-level API requires you to to manage TypeScript project yourself. See ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API"}),"Using the Compiler API")," page for the introduction to TypeScript API."),Object(i.b)("h3",{id:"transpile"},"Transpile"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"program: ts.Program - The TypeScript program to transpile (note: unlike the high-level API, compilerOptions is part of the program and cannot be supplied separately)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"[Optional]")," sourceFiles: ts.SourceFile[] - A collection of ",Object(i.b)("inlineCode",{parentName:"li"},"SourceFile"),"s to transpile, ",Object(i.b)("inlineCode",{parentName:"li"},"program.getSourceFiles()")," by default."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"[Optional]")," customTransformers: ts.CustomTransformers - List of extra ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/configuration#transformers"}),"TypeScript transformers"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"[Optional]")," plugins: tstl.Plugin[] - List of ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/plugins"}),"TypeScriptToLua plugins"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"[Optional]")," emitHost: tstl.EmitHost - Provides the methods for reading/writing files, useful in cases where you need something other than regular reading from disk. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"ts.sys"),".")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'const reportDiagnostic = tstl.createDiagnosticReporter(true);\nconst configFileName = path.resolve(__dirname, "tsconfig.json");\nconst parsedCommandLine = tstl.parseConfigFileWithSystem(configFileName);\nif (parsedCommandLine.errors.length > 0) {\n  parsedCommandLine.errors.forEach(reportDiagnostic);\n  return;\n}\n\nconst program = ts.createProgram(parsedCommandLine.fileNames, parsedCommandLine.options);\nconst { transpiledFiles, diagnostics: transpileDiagnostics } = tstl.transpile({ program });\n\nconst emitResult = tstl.emitTranspiledFiles(options, transpiledFiles);\nemitResult.forEach(({ name, text }) => ts.sys.writeFile(name, text));\n\nconst diagnostics = ts.sortAndDeduplicateDiagnostics([...ts.getPreEmitDiagnostics(program), ...transpileDiagnostics]);\ndiagnostics.forEach(reportDiagnostic);\n')))}p.isMDXComponent=!0}}]);