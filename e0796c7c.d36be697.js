(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{118:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var a=t(2),o=(t(0),t(215)),r=t(365);const c={title:"Functions and the `self` Parameter"},i={id:"advanced/functions-and-the-self-parameter",title:"Functions and the `self` Parameter",description:"Every Function Has a Context Parameter",source:"@site/docs/advanced/functions-and-the-self-parameter.md",permalink:"/docs/advanced/functions-and-the-self-parameter",editUrl:"https://github.com/TypeScriptToLua/TypeScriptToLua.github.io/edit/source/docs/advanced/functions-and-the-self-parameter.md",sidebar:"docs",previous:{title:"Compiler Annotations",permalink:"/docs/advanced/compiler-annotations"},next:{title:"Overview",permalink:"/docs/api/overview"}},l=[{value:"Every Function Has a Context Parameter",id:"every-function-has-a-context-parameter",children:[]},{value:"Removing the Context Parameter",id:"removing-the-context-parameter",children:[{value:"<code>this: void</code>",id:"this-void",children:[]},{value:"<code>@noSelf</code>",id:"noself",children:[]},{value:"<code>@noSelfInFile</code>",id:"noselfinfile",children:[]}]},{value:"Assignment Errors",id:"assignment-errors",children:[{value:"Overloads",id:"overloads",children:[]}]}],s={rightToc:l};function b({components:e,...n}){return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"every-function-has-a-context-parameter"},"Every Function Has a Context Parameter"),Object(o.b)("p",null,"In JavaScript and TypeScript, almost all functions have access to an implicit ",Object(o.b)("inlineCode",{parentName:"p"},"this")," parameter. In order to maintain compatibility with this, all Lua functions are generated with an extra initial context parameter."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)(r.a,{mdxType:"SideBySide"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'function myFunction(arg: string) {}\nmyFunction("foo");\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'function myFunction(self, arg)\nend\nmyFunction(nil, "foo")\n'))),Object(o.b)("p",null,"The reason for this is that a method can be assigned to a stand-alone function and vice-versa."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'class MyClass {\n  myMethod(arg: string) {\n    console.log("myMethod", arg);\n  }\n}\n\nlet myFunction = function (arg: string) {\n  console.log("myFunction", arg);\n};\n\nconst c = new MyClass();\n\nc.myMethod = myFunction;\nc.myMethod("foo"); // should output: myFunction foo\n// or\nmyFunction = c.myMethod;\nmyFunction("foo"); // should output: myMethod foo;\n')),Object(o.b)("p",null,"If ",Object(o.b)("inlineCode",{parentName:"p"},"myFunction")," did not have the initial parameter, calling either after being re-assigned would cause potential runtime errors, since ",Object(o.b)("inlineCode",{parentName:"p"},"myMethod")," would expect an initial parameter and ",Object(o.b)("inlineCode",{parentName:"p"},"myFunction")," would not."),Object(o.b)("p",null,"Note that even declared functions are assumed to have this extra parameter as well."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)(r.a,{mdxType:"SideBySide"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'declare function myLibFunction(arg: string): void;\nmyLibFunction("foo");\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'myLibFunction(nil, "foo")\n'))),Object(o.b)("h2",{id:"removing-the-context-parameter"},"Removing the Context Parameter"),Object(o.b)("p",null,"When dealing with external library functions that don't expect this initial parameter, you will need to inform TypeScriptToLua. This can be done a few different ways."),Object(o.b)("h3",{id:"this-void"},Object(o.b)("inlineCode",{parentName:"h3"},"this: void")),Object(o.b)("p",null,"You can declare any function with ",Object(o.b)("inlineCode",{parentName:"p"},"this: void")," to prevent generation of this initial argument."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)(r.a,{mdxType:"SideBySide"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'declare function myLibFunction(this: void, arg: string): void;\nmyLibFunction("foo");\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'myLibFunction("foo")\n'))),Object(o.b)("p",null,"This works on methods as well, which can be useful if you have class methods which should be called with a dot ",Object(o.b)("inlineCode",{parentName:"p"},".")," instead of a colon ",Object(o.b)("inlineCode",{parentName:"p"},":"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)(r.a,{mdxType:"SideBySide"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'declare class MyClass {\n  withContext(arg: string): void;\n  withoutContext(this: void, arg: string): void;\n}\nconst c = new MyClass();\nc.withContext("foo");\nc.withoutContext("foo");\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'local c = __TS__New(MyClass)\nc:withContext("foo") -- uses colon :\nc.withoutContext("foo") -- uses dot .\n'))),Object(o.b)("p",null,"Another common scenario is a library function which takes a lua callback function, which should not have a context parameter."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)(r.a,{mdxType:"SideBySide"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"declare function takesCallback(\n  this: void,\n  callback: (this: void, arg: string) => void,\n): void;\n\ntakesCallback(arg => {\n  console.log(arg);\n});\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"takesCallback(function(arg) print(arg) end)\n"))),Object(o.b)("h3",{id:"noself"},Object(o.b)("inlineCode",{parentName:"h3"},"@noSelf")),Object(o.b)("p",null,"If you wish to specify that all functions in a class, interface or namespace should not have a context parameter, you can use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/advanced/compiler-annotations#noself"}),Object(o.b)("inlineCode",{parentName:"a"},"@noSelf"))," annotation."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)(r.a,{mdxType:"SideBySide"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'/** @noSelf **/\ndeclare namespace MyNamespace {\n  function myFunction(arg: string): void;\n}\nMyNamespace.myFunction("foo");\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'MyNamespace.myFunction("foo")\n'))),Object(o.b)("p",null,"You can override ",Object(o.b)("inlineCode",{parentName:"p"},"@noSelf")," on a per-function basis by specifying a ",Object(o.b)("inlineCode",{parentName:"p"},"this")," parameter."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)(r.a,{mdxType:"SideBySide"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'/** @noSelf **/\ndeclare namespace MyNamespace {\n  function myFunction(this: any, arg: string): void;\n}\nMyNamespace.myFunction("foo");\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'MyNamespace:myFunction("foo")\n'))),Object(o.b)("h3",{id:"noselfinfile"},Object(o.b)("inlineCode",{parentName:"h3"},"@noSelfInFile")),Object(o.b)("p",null,"If you want to specify that all functions in a file should have no context, you can use ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/advanced/compiler-annotations#noselfinfile"}),Object(o.b)("inlineCode",{parentName:"a"},"@noSelfInFile"))," at the top of the file."),Object(o.b)("p",null,"For more information on ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/advanced/compiler-annotations#noself"}),Object(o.b)("inlineCode",{parentName:"a"},"@noSelf"))," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/advanced/compiler-annotations#noselfinfile"}),Object(o.b)("inlineCode",{parentName:"a"},"@noSelfInFile")),", please refer to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"compiler-annotations"}),"Compiler Annotations"),"."),Object(o.b)("h2",{id:"assignment-errors"},"Assignment Errors"),Object(o.b)("p",null,"Functions that have a context parameter cannot be assigned to functions that do not, and vice-versa. A common case where this may occur is passing a callback to an api that expects a function that does not take an initial argument."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"declare function takesCallback(callback: (this: void, arg: string) => void);\n\nfunction myCallback(arg: string) {}\ntakesCallback(myCallback); // Error: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.\n")),Object(o.b)("p",null,"This throws an error because if ",Object(o.b)("inlineCode",{parentName:"p"},"takesCallback")," called ",Object(o.b)("inlineCode",{parentName:"p"},"myCallback"),", it would do so without passing an initial context parameter. This can be easily fixed simply by wrapping the call in an arrow function."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example")),Object(o.b)(r.a,{mdxType:"SideBySide"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"takesCallback((arg) => myCallback(arg));\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"takesCallback(function(arg) return myCallback(nil, arg) end)\n"))),Object(o.b)("p",null,"The reason this works is because TypeScriptToLua infers whether the arrow function should take a context parameter or not based on the type it's being assigned to."),Object(o.b)("h3",{id:"overloads"},"Overloads"),Object(o.b)("p",null,"If a function is overloaded and the signatures differ in context type, you can not assign them:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"declare function takesFunction(f: Function): void;\n\ndeclare function myFunction(this: void, s: string, n: number): void;\ndeclare function myFunction(s: string);\n\ntakesFunction(myFunction); // Error: Unsupported assignment of function with different overloaded types for 'this'. Overloads should all have the same type for 'this'.\n")),Object(o.b)("p",null,"It's best practice to avoid overloads with different context types."))}b.isMDXComponent=!0},215:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),b=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=b(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(t),d=a,m=p["".concat(c,".").concat(d)]||p[d]||u[d]||r;return t?o.a.createElement(m,i(i({ref:n},s),{},{components:t})):o.a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,c=new Array(r);c[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<r;s++)c[s]=t[s];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},365:function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));var a=t(0),o=t.n(a),r=t(366),c=t.n(r);function i({children:e}){const n=o.a.Children.count(e);if(2!==n)throw new Error("Invalid SideBySide children count: "+n);const[t,a]=o.a.Children.toArray(e);return o.a.createElement("div",{className:c.a.sideBySide},t,a)}},366:function(e,n,t){e.exports={sideBySide:"sideBySide_2tt-"}}}]);