(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{173:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||r;return n?i.a.createElement(m,l(l({ref:t},c),{},{components:n})):i.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var a=n(2),i=(n(0),n(173));const r={title:"Writing Declarations"},o={unversionedId:"advanced/writing-declarations",id:"advanced/writing-declarations",isDocsHomePage:!1,title:"Writing Declarations",description:"The real power of the transpiler is unlocked when combining it with declarations for your target environment. Declarations tell TypeScript which Lua API is available in your target context.",source:"@site/docs/advanced/writing-declarations.md",slug:"/advanced/writing-declarations",permalink:"/docs/advanced/writing-declarations",editUrl:"https://github.com/TypeScriptToLua/TypeScriptToLua.github.io/edit/source/docs/advanced/writing-declarations.md",version:"current",sidebar:"docs",previous:{title:"Editor Support",permalink:"/docs/editor-support"},next:{title:"Compiler Annotations",permalink:"/docs/advanced/compiler-annotations"}},l=[{value:"About Declaration Files",id:"about-declaration-files",children:[]},{value:"Declare Keyword",id:"declare-keyword",children:[]},{value:"Export Keyword",id:"export-keyword",children:[]},{value:"Self Parameter",id:"self-parameter",children:[]},{value:"Comments and Annotations",id:"comments-and-annotations",children:[]},{value:"Environmental Declarations",id:"environmental-declarations",children:[]},{value:"Advanced Types",id:"advanced-types",children:[]},{value:"Declaration Merging",id:"declaration-merging",children:[{value:"Function + Table",id:"function--table",children:[]}]},{value:"Declaration Examples",id:"declaration-examples",children:[{value:"Interfaces",id:"interfaces",children:[]},{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Ambient Modules",id:"ambient-modules",children:[]},{value:"Unions",id:"unions",children:[]},{value:"keyof",id:"keyof",children:[]},{value:"Literal Types",id:"literal-types",children:[]},{value:"Keyword Workarounds",id:"keyword-workarounds",children:[]},{value:"Operator Overloads",id:"operator-overloads",children:[]},{value:"Import and export",id:"import-and-export",children:[]}]},{value:"NPM Publishing",id:"npm-publishing",children:[]},{value:"Debugging Declarations",id:"debugging-declarations",children:[]}],s={rightToc:l};function c({components:e,...t}){return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The real power of the transpiler is unlocked when combining it with declarations for your target environment. Declarations tell TypeScript which Lua API is available in your target context."),Object(i.b)("p",null,"If you need tips or help writing declarations, feel free to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://discord.gg/BWAq58Y"}),"join our Discord"),"."),Object(i.b)("h2",{id:"about-declaration-files"},"About Declaration Files"),Object(i.b)("p",null,"Declaration files end with the extension ",Object(i.b)("em",{parentName:"p"},".d.ts"),". These contain pure ambient code."),Object(i.b)("p",null,"For TypeScriptToLua, these files should contain information that describes the target Lua environment."),Object(i.b)("p",null,"This means functions, modules, variables and other members of the target Lua environment are primarily described in these files."),Object(i.b)("p",null,"They don't contain code that you would execute. Similar to how you'd write an interface in some other languages. TypeScriptToLua doesn't output any information from these files either."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"You can write ambient declarations inside ",Object(i.b)("em",{parentName:"p"},".ts")," files as well."))),Object(i.b)("h2",{id:"declare-keyword"},"Declare Keyword"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"declare")," keyword is used to say that the following declaration defines something that exists within global scope. Like something within the ",Object(i.b)("inlineCode",{parentName:"p"},"_G")," table in Lua."),Object(i.b)("p",null,"This is useful for defining Lua's environment."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=_G.d.ts",title:"_G.d.ts"}),"// Uses some declarations from\n// https://www.lua.org/manual/5.1/manual.html\n\n/**\n * A global variable (not a function) that holds a string containing the\n * current interpreter version.\n */\ndeclare const _VERSION: number;\n\n/**\n * Receives any number of arguments, and prints their values to stdout, using the\n * tostring function to convert them to strings. print is not intended for\n * formatted output, but only as a quick way to show a value, typically for\n * debugging. For formatted output, use string.format.\n * @param args Arguments to print\n */\ndeclare function print(...args: any[]): void;\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=main.ts",title:"main.ts"}),"print(_VERSION); // Editor and transpiler know what print and _VERSION are\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"You can use ",Object(i.b)("inlineCode",{parentName:"p"},"declare")," to write ambient declarations inside ",Object(i.b)("em",{parentName:"p"},".ts")," files."))),Object(i.b)("h2",{id:"export-keyword"},"Export Keyword"),Object(i.b)("p",null,"The export keyword indicates something is exported and can be used by external code."),Object(i.b)("p",null,"This also includes ambient interfaces, types, modules and other items that don't result in any transpiled code."),Object(i.b)("p",null,"If a file named ",Object(i.b)("em",{parentName:"p"},"lib.lua")," exists and returns a table with an ",Object(i.b)("inlineCode",{parentName:"p"},"x")," field, you can write ",Object(i.b)("em",{parentName:"p"},"lib.d.t.s")," as follows to tell TypeScript that ",Object(i.b)("em",{parentName:"p"},"lib")," exists and what it provides."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=lib.d.ts",title:"lib.d.ts"}),"export let x: number;\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=main.ts",title:"main.ts"}),'import { x } from "./lib";\n')),Object(i.b)("p",null,"If a namespace contains certain functions, ",Object(i.b)("inlineCode",{parentName:"p"},"export")," tells TypeScript that those functions can be accessed within the namespace."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=table.d.ts",title:"table.d.ts"}),"declare namespace table {\n  /**\n   * @noSelf\n   */\n  export function insert(table: object, item: any): number;\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=main.ts",title:"main.ts"}),"table.insert({}, 1);\n")),Object(i.b)("p",null,"If a globally available module exists within the Lua environment. You can define what the module provides."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=utf8.d.ts",title:"utf8.d.ts"}),'declare module "utf8" {\n  /**\n   * @noSelf\n   */\n  export function codepoint(): void;\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=main.ts",title:"main.ts"}),'import * as utf8 from "utf8"; // equiv to `local utf8 = require("utf8");\nutf8.codepoint();\n')),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"export")," keyword can be used in a ",Object(i.b)("inlineCode",{parentName:"p"},".ts")," or ",Object(i.b)("inlineCode",{parentName:"p"},".d.ts")," file. It tells the transpiler and your editor (potentially) that something ",Object(i.b)("strong",{parentName:"p"},"contains/provides")," something that you can either import (by using ",Object(i.b)("inlineCode",{parentName:"p"},"import")," in TS or ",Object(i.b)("inlineCode",{parentName:"p"},"require()")," in Lua) or access."),Object(i.b)("h2",{id:"self-parameter"},"Self Parameter"),Object(i.b)("p",null,"TypeScript has a hidden ",Object(i.b)("inlineCode",{parentName:"p"},"this")," parameter attached to every function."),Object(i.b)("p",null,"This causes TypeScriptToLua to treat every function as if ",Object(i.b)("inlineCode",{parentName:"p"},"self")," exists as its first parameter."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"declare function assert(value: any): void;\n// TypeScript:          assert(this: any, value: any): void;\n// TypeScriptToLua:     assert(self, value)\nassert(true); // assert(_G, true)\n")),Object(i.b)("p",null,"This allows users to modify ",Object(i.b)("inlineCode",{parentName:"p"},"this")," inside a function and expect behaviour similar to what JavaScript does."),Object(i.b)("p",null,"But obviously Lua does not have a ",Object(i.b)("inlineCode",{parentName:"p"},"self"),' parameter for every function, so one of the three options must happen to tell TypeScriptToLua there is no "contextual parameter" (',Object(i.b)("inlineCode",{parentName:"p"},"self"),"):"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Use ",Object(i.b)("inlineCode",{parentName:"li"},"this: void")," as the first parameter of the function / method. This formally describes to TypeScript to not allow ",Object(i.b)("inlineCode",{parentName:"li"},"this")," to be modified inside this function. (you could also use the ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/configuration#custom-options"}),"noImplicitThis")," option to disallow ",Object(i.b)("inlineCode",{parentName:"li"},"this")," to be modified if ",Object(i.b)("inlineCode",{parentName:"li"},"this")," is of an ",Object(i.b)("inlineCode",{parentName:"li"},"any")," type)."),Object(i.b)("li",{parentName:"ol"},"Use ",Object(i.b)("inlineCode",{parentName:"li"},"@noSelf")," in the comments of the declaration's owner (the namespace, module, object, etc)."),Object(i.b)("li",{parentName:"ol"},"Use ",Object(i.b)("inlineCode",{parentName:"li"},"@noSelfInFile"),' at the beginning of the file in a comment to make sure every function defined in this file does not use a "contextual parameter".')),Object(i.b)("p",null,"Below is three ways to make ",Object(i.b)("inlineCode",{parentName:"p"},"table.remove"),' not use a "contextual parameter".'),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"declare namespace table {\n  export function remove(this: void, table: object, index: number): any;\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/** @noSelf */\ndeclare namespace table {\n  export function remove(table: object, index: number): any;\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/** @noSelfInFile */\n\ndeclare namespace table {\n  export function remove(table: object, index: number): any;\n}\n")),Object(i.b)("p",null,"By doing this, the transpiler also figures out if it needs to use ",Object(i.b)("inlineCode",{parentName:"p"},":")," or ",Object(i.b)("inlineCode",{parentName:"p"},".")," when invoking a function / method."),Object(i.b)("h2",{id:"comments-and-annotations"},"Comments and Annotations"),Object(i.b)("p",null,"If you're using an editor that seeks out information about functions, variables, etc. It will likely find the file where what it is analyzing is defined and check out the comment above it."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/**\n * When hovering over print, this description will be shown\n * @param args Stuff to print\n */\ndeclare function print(...args: any[]);\n")),Object(i.b)("p",null,Object(i.b)("a",{href:"/play/#code/PTAEEEBtNBLA7UB7eBTUATVAzBsAusKoAhvBnALYAOkqlq8+Jhx2SATqKgB4k10AzqEEkA1qgBQk4ACpZk0LNAB1ABaNQapADdUHBAHNkertQNMANKHxrYwrIIDGB6q0QB3WNFAAjdILaHvCKygAC1CQc-KAA3mQAngDaALoAvqQchsIAyvgArtjYNkig5gj4ocCSWE6QUejY+fBO7mUW+AAUAHS9UdkAXKTwySkAlADc0iCgACocCVq6+kagCUj5XE6bgpwm+qAABuVMh5InXQBEABKo0EiXk5JAA",target:"_blank"},"Try out what this looks like in an editor")),Object(i.b)("p",null,"TypeScript uses ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/microsoft/tsdoc"}),"TSDoc")," for its comments. TSDoc allows you to also use markdown in your comments! This means pictures, links, tables, code syntax highlighting and more markdown features are available. These may display differently depending on the editor in use."),Object(i.b)("p",null,"Here are some commonly used TSDoc tags used in comments:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Tag"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"@param <name> <description>")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Defines a parameter. e.g. A parameter for a function")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"@return <description>")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Describes the return value of a function / method")))),Object(i.b)("p",null,'TypeScriptToLua takes this further. Some "tags" change how the transpiler translates certain pieces of code. These are referred to as ',Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/advanced/compiler-annotations"}),"annotations"),"."),Object(i.b)("p",null,"As an example, ",Object(i.b)("inlineCode",{parentName:"p"},"@tupleReturn")," marks a function as something which returns multiple values instead of its array."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/**\n * Returns multiple values\n * @tupleReturn\n */\ndeclare function tuple(): [number, number];\n\nlet [a, b] = tuple();\n// local a, b = tuple()\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/**\n * Returns a table array containing two numbers\n */\ndeclare function array(): [number, number];\n\nlet [c, d] = array();\n// local c, d = unpack(array())\n")),Object(i.b)("p",null,"See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/advanced/compiler-annotations"}),"Compiler Annotations")," page for more information."),Object(i.b)("h2",{id:"environmental-declarations"},"Environmental Declarations"),Object(i.b)("p",null,"By default, TypeScript includes global type declarations for both ECMAScript and web standards. TypeScriptToLua aims to support only standard ECMAScript feature set. To make TypeScript not suggest you to use unsupported browser builtins (including ",Object(i.b)("inlineCode",{parentName:"p"},"window"),", ",Object(i.b)("inlineCode",{parentName:"p"},"document"),", ",Object(i.b)("inlineCode",{parentName:"p"},"console"),", ",Object(i.b)("inlineCode",{parentName:"p"},"setTimeout"),") you can specify a ",Object(i.b)("inlineCode",{parentName:"p"},"lib")," option:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:"title=tsconfig.json",title:"tsconfig.json"}),'{\n  "compilerOptions": {\n    "lib": ["esnext"]\n  }\n}\n')),Object(i.b)("p",null,"It is also possible to use ",Object(i.b)("inlineCode",{parentName:"p"},"noLib")," to remove every standard declaration (to use TypeScriptToLua only for syntactic features with Lua standard library) but TypeScript ",Object(i.b)("strong",{parentName:"p"},"needs")," certain declarations to exist so they will have to be manually defined, so using ",Object(i.b)("inlineCode",{parentName:"p"},"noLib")," is not recommended."),Object(i.b)("h2",{id:"advanced-types"},"Advanced Types"),Object(i.b)("p",null,"We recommend reading about Mapped and Conditional types. These things can be used as effective tools to describe some dynamic things that you may have in Lua."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#"}),"Advanced Types (TypeScriptLang)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types"}),"Mapped Types")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#conditional-types"}),"Conditional Types"))))),Object(i.b)("h2",{id:"declaration-merging"},"Declaration Merging"),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"}),"https://www.typescriptlang.org/docs/handbook/declaration-merging.html")),Object(i.b)("p",null,"Some examples of declaration merging have been shown in the above examples."),Object(i.b)("h3",{id:"function--table"},"Function + Table"),Object(i.b)("p",null,"Some tables can use ",Object(i.b)("inlineCode",{parentName:"p"},"__call")," to make themselves callable. Busted (the Lua testing suite) does this to ",Object(i.b)("inlineCode",{parentName:"p"},"assert"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=assert.d.ts",title:"assert.d.ts"}),"declare function assert(value: any, errorDescription?: string): void;\ndeclare namespace assert {\n  export function isEqual(): void;\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=main.ts",title:"main.ts"}),"assert.isEqual();\nassert();\n")),Object(i.b)("h2",{id:"declaration-examples"},"Declaration Examples"),Object(i.b)("h3",{id:"interfaces"},"Interfaces"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=image.d.ts",title:"image.d.ts"}),"interface Image {\n  /** @tupleReturn */\n  getDimensions(): [number, number];\n}\n\n// This interface merges with its previous declaration\n/** @noSelf */\ninterface Image {\n  getFlags(): object;\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=main.ts",title:"main.ts"}),"declare let image: Image;\nlet [w, h] = image.getDimensions(); // local w, h = image:getDimensions()\nlet o = image.getFlags();\n")),Object(i.b)("h3",{id:"namespaces"},"Namespaces"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=love.d.ts",title:"love.d.ts"}),"declare namespace love {\n  export let update: (delta: number) => void;\n  /** @tupleReturn */\n  export function getVersion(delta: number): [number, number, number, string];\n  export namespace graphics {\n    function newImage(filename: string): Image;\n  }\n}\n\n// This namespace merges with its previous declaration\n/** @noSelf */\ndeclare namespace love {\n  export let update: (delta: number) => void;\n}\n\n/** @noSelf */\ndeclare namespace string {\n  function byte(s: string, i?: number, j?: number): number;\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=main.ts",title:"main.ts"}),'let [a, b, c, d] = love.getVersion();\nlet p = love.graphics.newImage("file.png");\n')),Object(i.b)("h3",{id:"classes"},"Classes"),Object(i.b)("p",null,"Because Lua doesn't have a strictly defined concept of a class, for TypeScriptToLua ",Object(i.b)("inlineCode",{parentName:"p"},"class")," declaration implies a very specific structure, built specifically for TypeScript compatibility. Because of that, usually you shouldn't use ",Object(i.b)("inlineCode",{parentName:"p"},"declare class")," for values coming from Lua."),Object(i.b)("p",null,"Most of Lua patterns used to simulate classes can be declared using interfaces instead."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example 1"),": a table with a static ",Object(i.b)("inlineCode",{parentName:"p"},"new")," method to construct new instances"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"Box = {}\nBox.__index = Box\n\nfunction Box.new(value)\n    local self = {}\n    setmetatable(self, Box)\n    self._value = value\n    return self\nend\n\nfunction Box:get()\n    return self._value\nend\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'interface Box {\n  get(): string;\n}\n\ninterface BoxConstructor {\n  new: (this: void, value: string) => Box;\n}\n\ndeclare var Box: BoxConstructor;\n\n// Usage\nconst box = Box.new("foo");\nbox.get();\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example 2"),": a callable table with extra static methods"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'Box = {}\n\nlocal instance\nfunction Box:getInstance()\n    if instance then return instance end\n    instance = Box("instance")\n    return instance\nend\n\nsetmetatable(Box, {\n    __call = function(_, value)\n        return { get = function() return value end }\n    end\n})\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'interface Box {\n  get(): string;\n}\n\ninterface BoxConstructor {\n  (this: void, value: string): Box;\n  getInstance(): Box;\n}\n\ndeclare var Box: BoxConstructor;\n\n// Usage\nconst box = Box("foo");\nbox.get();\nBox.getInstance().get();\n')),Object(i.b)("h3",{id:"ambient-modules"},"Ambient Modules"),Object(i.b)("p",null,"You may have to use the ",Object(i.b)("inlineCode",{parentName:"p"},"@noResolution")," annotation to tell TypeScriptToLua to not try any path resolution methods when the specified module is imported."),Object(i.b)("p",null,"Module declarations need to be kept in ",Object(i.b)("em",{parentName:"p"},".d.ts")," files."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=types.d.ts",title:"types.d.ts"}),'/** @noSelf */\ndeclare module "image-size" {\n  export function getimagewidth(filename: string): number;\n  export function getimageheight(filename: string): number;\n}\n\n/**\n * A module that only contains a number\n * @noResolution\n */\ndeclare module "number-of-the-day" {\n  let x: number;\n  export = x;\n}\n\n/**\n * Not very useful for TypeScript. It has no idea what is in here.\n * @noResolution\n */\ndeclare module "custom-module";\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=main.ts",title:"main.ts"}),'import { getimagewidth, getimageheight } from "image-size";\nimport * as x from "number-of-the-day";\nimport * as customModule from "custom-module";\n')),Object(i.b)("h3",{id:"unions"},"Unions"),Object(i.b)("p",null,"Unions can be used to tell TypeScript that a given type could be one of many other types. TypeScript can then pick up hints in the code to figure out what that type is at a given statement."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'declare interface PingResponse {\n  type: "ping";\n  timeTaken: number;\n}\n\ndeclare interface MessageResponse {\n  type: "message";\n  text: string;\n}\n\ndeclare type Response = PingResponse | MessageResponse;\n\ndeclare let response: Response;\n\nresponse.timeTaken;\n// Not allowed, if response is a MessageResponse, it won\'t have a timeTaken field\n\nswitch (response.type) {\n  case "ping":\n    // If the program arrives here, response: PingResponse\n    return response.timeTaken;\n  case "message":\n    // If the program arrives here, response: MessageResponse\n    return response.text;\n  case "disconnect":\n    // Impossible\n  default:\n    // Because of what Response is described as, TypeScript knows getting\n    // here is impossible.\n}\n')),Object(i.b)("h3",{id:"keyof"},"keyof"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'declare interface AvailableFiles {\n  "player.png": any;\n  "file.txt": any;\n}\n\ndeclare function getFile(filename: keyof AvailableFiles): string;\n\ngetFile("player.png"); // Valid\ngetFile("unknown.png"); // Invalid\n')),Object(i.b)("h3",{id:"literal-types"},"Literal Types"),Object(i.b)("p",null,"String and number values can be used as types too. In combination with union types it can be used to represent a known set of values."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'declare function drawLine(type: "solid" | "dashed"): void;\ndrawLine("solid"); // Valid\ndrawLine("rounded"); // Invalid\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"declare function getSupportedColors(): 1 | 8 | 256 | 16777216;\ngetSupportedColors() === 8; // Valid\ngetSupportedColors() === 16; // Invalid\n")),Object(i.b)("h3",{id:"keyword-workarounds"},"Keyword Workarounds"),Object(i.b)("p",null,"Some functions in Lua can have names that are keywords in TypeScript (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"try"),", ",Object(i.b)("inlineCode",{parentName:"p"},"catch"),", ",Object(i.b)("inlineCode",{parentName:"p"},"new"),", etc)."),Object(i.b)("p",null,"The parent to these kinds of functions will need to be represented as a JSON object."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// \u274c\ndeclare namespace table {\n  export function new: () => any;\n}\n\n// \u2714\ndeclare let table: {\n  new: () => any;\n};\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'// \u274c\ndeclare module "creator" {\n  export function new: () => any;\n}\n\n// \u2714\ndeclare module "creator" {\n  let exports: {\n    new: () => any;\n  };\n  export = exports;\n}\n')),Object(i.b)("h3",{id:"operator-overloads"},"Operator Overloads"),Object(i.b)("p",null,"Lua supports overloading of mathematical operators such as ",Object(i.b)("inlineCode",{parentName:"p"},"+"),", ",Object(i.b)("inlineCode",{parentName:"p"},"-")," or ",Object(i.b)("inlineCode",{parentName:"p"},"*"),". This is performed using the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.lua.org/manual/5.4/manual.html#2.4"}),"metatable methods")," ",Object(i.b)("inlineCode",{parentName:"p"},"__add"),", ",Object(i.b)("inlineCode",{parentName:"p"},"__sub"),", ",Object(i.b)("inlineCode",{parentName:"p"},"__mul"),", ",Object(i.b)("inlineCode",{parentName:"p"},"__div"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"__unm"),". Since TypeScript does not support operator overloading in its type system, this feature is hard to replicate. Unfortunately, this is not something that can be fixed properly right now without forking off our custom TypeScript version."),Object(i.b)("p",null,"However, there is a workaround that works decently: if you declare a type as an intersection type with ",Object(i.b)("inlineCode",{parentName:"p"},"number"),", it will inherit all mathematical operators. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"declare type Vector = number & {\n  x: number;\n  y: number;\n  dot(v: Vector): number;\n  cross(v: Vector): Vector;\n};\n\ndeclare function Vector(x: number, y: number): Vector;\n\nconst v1 = Vector(3, 4);\nconst v2 = Vector(4, 5);\nconst v3 = (v1 * 4) as Vector;\nconst d = v3.dot(v2);\n")),Object(i.b)("h3",{id:"import-and-export"},"Import and export"),Object(i.b)("p",null,"Using ",Object(i.b)("inlineCode",{parentName:"p"},"import")," can be important for making sure an ",Object(i.b)("em",{parentName:"p"},"index.d.ts")," file contains all the declarations needed."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:"title=index.d.ts",title:"index.d.ts"}),'import "./lib";\n// All global declarations in lib will be included with this file\n\nexport { Player } from "./Entities";\n// The Player declaration is re-exported from this file\n')),Object(i.b)("p",null,"It is also possible to place ",Object(i.b)("inlineCode",{parentName:"p"},"import")," statements inside ambient modules and namespaces."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'declare module "mymodule" {\n  import * as types from "types";\n  export function getType(): types.Type;\n}\n')),Object(i.b)("h2",{id:"npm-publishing"},"NPM Publishing"),Object(i.b)("p",null,"It is possible to publish a list of declarations for other users to easily download via ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/"}),"npm"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm init\nnpm login               # Need npm account\nnpm publish --dry-run   # Show what files will be published\nnpm version 0.0.1       # Update the version in package.json when --dry-run seems good\nnpm publish             # Publish to npm (only if you're 100% sure)\n")),Object(i.b)("p",null,"Then the user can install this package using:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install <declarations> --save-dev\n")),Object(i.b)("p",null,"And link it to a ",Object(i.b)("em",{parentName:"p"},"tsconfig.json")," file."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:"title=tsconfig.json",title:"tsconfig.json"}),'{\n  "compilerOptions": {\n    "types": ["declarations"]\n  }\n}\n')),Object(i.b)("h2",{id:"debugging-declarations"},"Debugging Declarations"),Object(i.b)("p",null,"If you have TypeScript installed, you can use the command below to list all files a ",Object(i.b)("em",{parentName:"p"},"tsconfig.json")," file targets."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"tsc -p tsconfig.json --noEmit --listFiles\n")),Object(i.b)("p",null,"This only works with TypeScript (",Object(i.b)("em",{parentName:"p"},"tsc"),"). TypeScriptToLua (",Object(i.b)("em",{parentName:"p"},"tstl"),") may have support for this in the future."),Object(i.b)("p",null,"Every TypeScript project points to a list of declarations. TypeScript is very generous with what files that includes."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:"title=tsconfig.json",title:"tsconfig.json"}),'{\n  "compilerOptions": {\n    "rootDir": "src"\n  }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"  node_modules/\n+ src/main.ts\n+ src/actors/Player.ts\n+ global.ts\n  tsconfig.json\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:"title=tsconfig.json",title:"tsconfig.json"}),'{\n  "compilerOptions": {\n    "rootDir": "src",\n    "types": ["lua-types/jit"]\n  }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"+ node_modules/lua-types/jit.d.ts\n+ src/main.ts\n+ src/actors/Player.ts\n+ global.ts\n  tsconfig.json\n")))}c.isMDXComponent=!0}}]);